{% extends 'base.html.twig' %}

{% block title %} Simulation view {% endblock %}

{% block body %}

   {#
   <div id="content">
        <h3>Hello, this is a H3 tag</h3>

       <p>A paragraph</p>
   </div>
   <div id="editor"></div>
   <button id="cmd">generate PDF</button>
    #}
   <div class="blockHead headMedium">
      <div class="row title">
         <h1 class="col-12"> Ma Simulation </h1>
      </div>
   </div>

   <div class="row justify-content-start">
      <div class="col-6 backLink">
         <a href="{{ path('app_simulations_list')}}">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-arrow-left-short" viewBox="0 0 16 16">
               <path fill-rule="evenodd" d="M12 8a.5.5 0 0 1-.5.5H5.707l2.147 2.146a.5.5 0 0 1-.708.708l-3-3a.5.5 0 0 1 0-.708l3-3a.5.5 0 1 1 .708.708L5.707 7.5H11.5a.5.5 0 0 1 .5.5z"/>
            </svg>
            Mes simulations</a>
      </div>
      <div class="col-6 backLink">
         <a href="{{ path('app_new_simulation', { slug: simulation.id })}}">
            Modifier</a>
      </div>
      <div class="col-6 backLink">
         <a href="{{ path('app_delete_simulation', { slug: simulation.id })}}">
            Supprimer</a>
      </div>
   </div>

   <div class="row d-flex justify-content-center simulationDetails">
      <h2 class="col-12 title center">{{ simulation.name }}</h2>
   </div>
    <div class="row d-flex justify-content-center simulationDetails">
      <p class="col-12 title center">Créée le {{ simulation.createdAt|format_datetime(locale='fr') }}</p>
   </div>

   <div id="hideElement">
      <div class="row d-flex justify-content-center simulationDownload" >
         <a class="col-3 title center" href="{{ path('app_email', { slug: simulation.id }) }}">
            <svg width="1.5em" height="1.5em" viewBox="0 0 16 16" class="bi bi-envelope" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
               <path fill-rule="evenodd" d="M0 4a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V4zm2-1a1 1 0 0 0-1 1v.217l7 4.2 7-4.2V4a1 1 0 0 0-1-1H2zm13 2.383l-4.758 2.855L15 11.114v-5.73zm-.034 6.878L9.271 8.82 8 9.583 6.728 8.82l-5.694 3.44A1 1 0 0 0 2 13h12a1 1 0 0 0 .966-.739zM1 11.114l4.758-2.876L1 5.383v5.73z"/>
            </svg>
            Envoyer par mail
         </a>
         <a class="col-3 title center" href="#" id="downloadPdf">
            <svg xmlns="http://www.w3.org/2000/svg" width="1.5em" height="1.5em" fill="currentColor" class="bi bi-download" viewBox="0 0 16 16">
               <path d="M.5 9.9a.5.5 0 0 1 .5.5v2.5a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1v-2.5a.5.5 0 0 1 1 0v2.5a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2v-2.5a.5.5 0 0 1 .5-.5z"/>
               <path d="M7.646 11.854a.5.5 0 0 0 .708 0l3-3a.5.5 0 0 0-.708-.708L8.5 10.293V1.5a.5.5 0 0 0-1 0v8.793L5.354 8.146a.5.5 0 1 0-.708.708l3 3z"/>
            </svg>
            Télécharger (pdf)
         </a>
      </div>
   </div>


   <div class="row d-flex justify-content-center">
      <h3 class="col-12 title center simulationReport">Compte de résultat</h3>
   </div>

   <div id="htmltopdf">

      <div class="row d-flex justify-content-center">
         <table class="table table-bordered border-primary table-hover">
            <thead class="table-primary">
               <tr>
                  <th scope="col"></th>
                  <th scope="col">Année 1</th>
                  <th scope="col">Année 2</th>
               </tr>
            </thead>
            <tbody>
               <tr>
                  <th scope="row">chiffre d'affaire HT</th>
                  <td>{{ result.turnover1 }}</td>
                  <td>{{ result.turnover2 }}</td>
               </tr>
               <tr>
                  <th scope="row" class="table-primary">Total produits d'exploitation :</th>
                  <td class="table-primary">{{ result.turnover1 }}</td>
                  <td class="table-primary">{{ result.turnover2 }}</td>
               </tr>
               <tr>
                  <th scope="row">Charges variables (dont achats consommés)</th>
                  <td>{{ result.variableCosts1 }}</td>
                  <td>{{ result.variableCosts2 }}</td>
               </tr>
               <tr>
                  <th scope="row">Impôts, taxes et versements assimilés</th>
                  <td>{{ result.cost.taxes }}</td>
                  <td>{{ result.cost.taxes }}</td>
               </tr>
               <tr>
                  <th scope="row">Salaires et charges sociales</th>
                  <td>{{ result.cost.salaries }}</td>
                  <td>{{ simulation.name }}</td>
               </tr>
               <tr>
                  <th scope="row">Loyer</th>
                  <td>{{ result.cost.rent }}</td>
                  <td>{{ result.cost.rent }}</td>
               </tr>
               <tr>
                  <th scope="row">Insurance</th>
                  <td>{{ result.cost.insurance }}</td>
                  <td>{{ result.cost.insurance }}</td>
               </tr>
               <tr>
                  <th scope="row">Autres coûts fixes</th>
                  <td>{{ result.cost.othersFixedCosts }}</td>
                  <td>{{ result.cost.othersFixedCosts }}</td>
               </tr>
               <tr>
                  <th scope="row" class="table-primary">Total charges d'exploitation :</th>
                  <td class="table-primary">{{ simulation.name }}</td>
                  <td class="table-primary">{{ simulation.name }}</td>
               </tr>
               <tr>
                  <th scope="row" class="table-primary">Résultat d'exploitation</th>
                  <td class="table-primary">{{ simulation.name }}</td>
                  <td class="table-primary">{{ simulation.name }}</td>
               </tr>
               <tr>
                  <th scope="row" class="table-primary">Résultat courant avant impôt</th>
                  <td class="table-primary">{{ simulation.name }}</td>
                  <td class="table-primary">{{ simulation.name }}</td>
               </tr>
               <tr>
                  <th scope="row">Impôt sur les bénéfices</th>
                  <td>{{ result.cost.corporationTax }}</td>
                  <td>{{ simulation.name }}</td>
               </tr>
               <tr>
                  <th scope="row" class="table-primary">Bénéfice ou Perte</th>
                  <td class="table-primary">{{ simulation.name }}</td>
                  <td class="table-primary">{{ simulation.name }}</td>
               </tr>
            </tbody>

         </table>
      </div>

   </div>

      {#
      <div id="reportPage">
         <div id="chartContainer" style="width: 30%;float: left;">
            <canvas id="myChart1"></canvas>
         </div>

         <div style="width: 30%; float: left;">
            <canvas id="myChart2"></canvas>
         </div>

         <br/><br/><br/>

         <div style="width: 30%; height: 400px; clear: both;">
            <canvas id="myChart3" style="width: 40%"></canvas>
         </div>
      </div>
      #}


   <div id="reportPage">
      <div class="row d-flex justify-content-center">
         <h3 class="col-12 title center simulationReport">Analyse graphique</h3>
      </div>

      <div class="row d-flex justify-content-center">
         <canvas class="col-12 title center" id="myDoughnutChart" width="400" height="100"></canvas>
      </div>

       <div class="row d-flex justify-content-center">
         <canvas class="col-12 title center" id="myChart" width="400" height="100"></canvas>
      </div>
   </div>



{% endblock %}


{% block javascripts %}
   {{ parent() }}
   <script>

      var ctx = document.getElementById('myChart');
      var myChart = new Chart(ctx, {
      type: 'bar',
      data: {
         labels: ['Besoin initial', 'Apport initial', "Chiffre d\'affaire", 'Charge fixes', 'Charges variables'],
         datasets: [{
            label: "valeur en euros par année d\'exercice",
            data: [25, 19, 2, 2, {{ simulation.id }}],
                  backgroundColor: [
                     'rgba(255, 99, 132, 0.2)',
                     'rgba(54, 162, 235, 0.2)',
                     'rgba(255, 206, 86, 0.2)',
                     'rgba(75, 192, 192, 0.2)',
                     'rgba(153, 102, 255, 0.2)'
                  ],
                  borderColor: [
                     'rgba(255, 99, 132, 1)',
                     'rgba(54, 162, 235, 1)',
                     'rgba(255, 206, 86, 1)',
                     'rgba(75, 192, 192, 1)',
                     'rgba(153, 102, 255, 1)'
                  ],
                  borderWidth: 1
               }]
            },
            options: {
               title: {
                  display: true,
                  text: 'Comparaison revenus/charges',
                  fontSize: 20,
               },
               scales: {
                  yAxes: [{
                     ticks: {
                        beginAtZero: true
                     }
                  }]
               }
            }
         });

         var test = document.getElementById('myDoughnutChart');
         var myDoughnutChart = new Chart(test, {
            type: 'doughnut',
            data: {
               labels: ['Salaires', 'Loyer', 'Assurance', 'Autres coûts fixes', 'Charges variables', 'Taxes', 'Impôts'],
               datasets: [{
                  data: [{{ result.cost.salaries }}, {{ result.cost.rent }}, {{ result.cost.insurance }}, {{ result.cost.othersFixedCosts }}, {{ result.cost.variableCosts }}, {{ result.cost.taxes }}, {{ result.cost.corporationTax }}],
                  backgroundColor: [
                     'rgba(255, 99, 132, 0.2)',
                     'rgba(54, 162, 235, 0.2)',
                     'rgba(255, 206, 86, 0.2)',
                     'rgba(75, 192, 192, 0.2)',
                     'rgba(153, 102, 255, 0.2)',
                     'rgba(255, 159, 64, 0.2)',
                     'rgba(255, 159, 64, 0.2)'
                  ],
                  borderColor: [
                     'rgba(255, 99, 132, 1)',
                     'rgba(54, 162, 235, 1)',
                     'rgba(255, 206, 86, 1)',
                     'rgba(75, 192, 192, 1)',
                     'rgba(153, 102, 255, 1)',
                     'rgba(255, 159, 64, 1)',
                     'rgba(255, 159, 64, 1)'
                  ],
                  borderWidth: 1
               }]
            },
            options: {
                  title: {
                     display: true,
                     text: 'Répartition des charges',
                     fontSize: 20,
                  },
               scales: {
                  yAxes: [{
                     ticks: {
                        beginAtZero: true
                     }
                  }]
               }
            }
         });

      // downloading pdf and canvas

      $('#downloadPdf').click(function(event) {

         // hide button element for download TODO To delete, not necessary anymore
         //document.getElementById("hideElement").style.display = "none"; //TODO mettre en JQuery

         // get size of report page
         var reportPageHeight = $('#reportPage').innerHeight();
         var reportPageWidth = $('#reportPage').innerWidth();

         // create a new canvas object that we will populate with all other canvas objects
         var pdfCanvas = $('<canvas/>').attr({
            id: "canvaspdf",
            width: reportPageWidth,
            height: reportPageHeight
         });

         // keep track canvas position
         var pdfctx = $(pdfCanvas)[0].getContext('2d');
         console.log(pdfctx); //TODO DELETE
         var pdfctxX = 0;
         var pdfctxY = 0;
         var buffer = 100;

         // for each chart.js chart
         $("canvas").each(function(index) {
            // get the chart height/width
            var canvasHeight = $(this).innerHeight();
            var canvasWidth = $(this).innerWidth();


            // draw the chart into the new canvas
            pdfctx.drawImage($(this)[0], pdfctxX, pdfctxY, canvasWidth, canvasHeight);
            //pdfctxX += canvasWidth + buffer;
            // pour revenir à la ligne car graph prend toute la largeur
            pdfctxX = 0;
            pdfctxY += canvasHeight + buffer;

            // our report page is in a grid pattern so replicate that in the new canvas
            //if (index % 2 === 1) {
            //   pdfctxX = 0;
            //   pdfctxY += canvasHeight + buffer;
            //}
         });


         // create new pdf and add new canvas as an image
         var pdf = new jsPDF('l', 'pt', [reportPageWidth, reportPageHeight]);

         // add title to pdf
         pdf.setFontSize(30);
         pdf.text(100, 50, "{{ simulation.name }}");
         pdf.setFontSize(10);
         pdf.setFontType("italic");
         pdf.text(100, 70, "Créée le {{ simulation.createdAt|format_datetime(locale='fr') }}");
         pdf.setFontType("normal");
         pdf.setFontSize(20);
         pdf.text(100, 100, "Part 2/2 | Analyse Graphiques");

         pdf.addImage($(pdfCanvas)[0], 'PNG', 100, 140);


         // download the canvas in pdf
         pdf.save('simulation_graphique.pdf');

         // download html in pdf
         var doc = new jsPDF();

         var specialElementHandlers = {
            '#hideElement': function (element, renderer) {
               return true;
            }
         };

         // add title to pdf
         doc.setFontSize(30);
         doc.text(15, 15, "{{ simulation.name }}");
         doc.setFontSize(10);
         doc.setFontType("italic");
         doc.text(15,22, "Créée le {{ simulation.createdAt|format_datetime(locale='fr') }}");
         doc.setFontType("normal");
         doc.setFontSize(20);
         doc.text(15, 32, "Part 1/2 | Compte de résultat");

         doc.fromHTML($('#htmltopdf').html(), 15, 50, {
            'width': 170,
            'elementHandlers': specialElementHandlers
         });

         doc.save('simuation_tableau.pdf');

         // display button element after download TODO To delete, not necessary anymore
        // document.getElementById("hideElement").style.display = "block"; //TODO mettre en JQuery

      });



   </script>
{% endblock %}