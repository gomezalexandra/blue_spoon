{% extends 'base.html.twig' %}

{% block title %} Simulation view {% endblock %}

{% block body %}

   {#
   <div id="content">
        <h3>Hello, this is a H3 tag</h3>

       <p>A paragraph</p>
   </div>
   <div id="editor"></div>
   <button id="cmd">generate PDF</button>
    #}


<div id="htmltopdf">

   <div class="row d-flex justify-content-center">
      <h2>Détails de la simulation {{ simulation.name }}</h2>
   </div>
    <div class="row d-flex justify-content-center">
      <p>Créée le {{ simulation.createdAt|format_datetime(locale='fr') }}</p>
   </div>
   <div class="row d-flex justify-content-center">
      <a href="{{ path('app_email', { slug: simulation.id }) }}">
         <svg width="2em" height="2em" viewBox="0 0 16 16" class="bi bi-envelope" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
            <path fill-rule="evenodd" d="M0 4a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V4zm2-1a1 1 0 0 0-1 1v.217l7 4.2 7-4.2V4a1 1 0 0 0-1-1H2zm13 2.383l-4.758 2.855L15 11.114v-5.73zm-.034 6.878L9.271 8.82 8 9.583 6.728 8.82l-5.694 3.44A1 1 0 0 0 2 13h12a1 1 0 0 0 .966-.739zM1 11.114l4.758-2.876L1 5.383v5.73z"/>
         </svg>
         Ma Simulation par mail!
      </a>
   </div>


   <div class="row d-flex justify-content-center">
      <h2>Compte de résultat</h2>
   </div>

   <div class="row d-flex justify-content-center">
      <table>
         <tr>
            <td></td>
            <td>Année 1</td>
            <td>Année 2</td>
         </tr>
         <tr>
            <td>chiffre d'affaire HT</td>
            <td>{{ result.turnover1 }}</td>
            <td>{{ result.turnover2 }}</td>
         </tr>
         <tr>
            <td>Total produits d'exploitation :</td>
            <td>{{ result.turnover1 }}</td>
            <td>{{ result.turnover2 }}</td>
         </tr>
         <tr>
            <td>Charges variables (dont achats consommés)</td>
            <td>{{ result.variableCosts1 }}</td>
            <td>{{ result.variableCosts2 }}</td>
         </tr>
         <tr>
            <td>Impôts, taxes et versements assimilés</td>
            <td>{{ result.cost.taxes }}</td>
            <td>{{ result.cost.taxes }}</td>
         </tr>
         <tr>
            <td>Salaires et charges sociales</td>
            <td>{{ result.cost.salaries }}</td>
            <td>{{ simulation.name }}</td>
         </tr>
         <tr>
            <td>Loyer</td>
            <td>{{ result.cost.rent }}</td>
            <td>{{ result.cost.rent }}</td>
         </tr>
         <tr>
            <td>Insurance</td>
            <td>{{ result.cost.insurance }}</td>
            <td>{{ result.cost.insurance }}</td>
         </tr>
         <tr>
            <td>Autres coûts fixes</td>
            <td>{{ result.cost.othersFixedCosts }}</td>
            <td>{{ result.cost.othersFixedCosts }}</td>
         </tr>
         <tr>
            <td>Total charges d'exploitation :</td>
            <td>{{ simulation.name }}</td>
            <td>{{ simulation.name }}</td>
         </tr>
         <tr>
            <td>Résultat d'exploitation</td>
            <td>{{ simulation.name }}</td>
            <td>{{ simulation.name }}</td>
         </tr>
         <tr>
            <td>Résultat courant avant impôt</td>
            <td>{{ simulation.name }}</td>
            <td>{{ simulation.name }}</td>
         </tr>
         <tr>
            <td>Impôt sur les bénéfices</td>
            <td>{{ result.cost.corporationTax }}</td>
            <td>{{ simulation.name }}</td>
         </tr>
         <tr>
            <td>Bénéfice ou Perte</td>
            <td>{{ simulation.name }}</td>
            <td>{{ simulation.name }}</td>
         </tr>

      </table>
   </div>


   <a href="#" id="downloadPdf">Download Report Page as PDF</a>
   <br/>
   {#
   <div id="reportPage">
      <div id="chartContainer" style="width: 30%;float: left;">
         <canvas id="myChart1"></canvas>
      </div>

      <div style="width: 30%; float: left;">
         <canvas id="myChart2"></canvas>
      </div>

      <br/><br/><br/>

      <div style="width: 30%; height: 400px; clear: both;">
         <canvas id="myChart3" style="width: 40%"></canvas>
      </div>
   </div>
   #}
   <div id="reportPage">
      <div class="row d-flex justify-content-center">
         <h2>Répartition des charges</h2>
         <canvas id="myDoughnutChart" width="400" height="100"></canvas>
      </div>

       <div class="row d-flex justify-content-center">
         <h2>Comparaison revenue/charge</h2>
         <canvas id="myChart" width="400" height="100"></canvas>
      </div>
   </div>

</div>

{% endblock %}


{% block javascripts %}
   {{ parent() }}
   <script>

      var ctx = document.getElementById('myChart');
      var myChart = new Chart(ctx, {
      type: 'bar',
      data: {
         labels: ['Besoin initial', 'Apport initial', "Chiffre d\'affaire", 'Charge fixes', 'Charges variables'],
         datasets: [{
            label: "valeur en euros par année d\'exercice",
            data: [25, 19, 2, 2, {{ simulation.id }}],
                  backgroundColor: [
                     'rgba(255, 99, 132, 0.2)',
                     'rgba(54, 162, 235, 0.2)',
                     'rgba(255, 206, 86, 0.2)',
                     'rgba(75, 192, 192, 0.2)',
                     'rgba(153, 102, 255, 0.2)'
                  ],
                  borderColor: [
                     'rgba(255, 99, 132, 1)',
                     'rgba(54, 162, 235, 1)',
                     'rgba(255, 206, 86, 1)',
                     'rgba(75, 192, 192, 1)',
                     'rgba(153, 102, 255, 1)'
                  ],
                  borderWidth: 1
               }]
            },
            options: {
               scales: {
                  yAxes: [{
                     ticks: {
                        beginAtZero: true
                     }
                  }]
               }
            }
         });

         var test = document.getElementById('myDoughnutChart');
         var myDoughnutChart = new Chart(test, {
            type: 'doughnut',
            data: {
               labels: ['Salaires', 'Loyer', 'Assurance', 'Autres coûts fixes', 'Charges variables', 'Taxes', 'Impôts'],
               datasets: [{
                  data: [{{ result.cost.salaries }}, {{ result.cost.rent }}, {{ result.cost.insurance }}, {{ result.cost.othersFixedCosts }}, {{ result.cost.variableCosts }}, {{ result.cost.taxes }}, {{ result.cost.corporationTax }}],
                  backgroundColor: [
                     'rgba(255, 99, 132, 0.2)',
                     'rgba(54, 162, 235, 0.2)',
                     'rgba(255, 206, 86, 0.2)',
                     'rgba(75, 192, 192, 0.2)',
                     'rgba(153, 102, 255, 0.2)',
                     'rgba(255, 159, 64, 0.2)',
                     'rgba(255, 159, 64, 0.2)'
                  ],
                  borderColor: [
                     'rgba(255, 99, 132, 1)',
                     'rgba(54, 162, 235, 1)',
                     'rgba(255, 206, 86, 1)',
                     'rgba(75, 192, 192, 1)',
                     'rgba(153, 102, 255, 1)',
                     'rgba(255, 159, 64, 1)',
                     'rgba(255, 159, 64, 1)'
                  ],
                  borderWidth: 1
               }]
            },
            options: {
               scales: {
                  yAxes: [{
                     ticks: {
                        beginAtZero: true
                     }
                  }]
               }
            }
         });



      $('#downloadPdf').click(function(event) {
         // get size of report page
         var reportPageHeight = $('#reportPage').innerHeight();
         var reportPageWidth = $('#reportPage').innerWidth();

         // create a new canvas object that we will populate with all other canvas objects
         var pdfCanvas = $('<canvas/>').attr({
            id: "canvaspdf",
            width: reportPageWidth,
            height: reportPageHeight
         });

         // keep track canvas position
         var pdfctx = $(pdfCanvas)[0].getContext('2d');
         console.log(pdfctx);
         var pdfctxX = 0;
         var pdfctxY = 0;
         var buffer = 100;

         // for each chart.js chart
         $("canvas").each(function(index) {
         // get the chart height/width
         var canvasHeight = $(this).innerHeight();
         var canvasWidth = $(this).innerWidth();


            // draw the chart into the new canvas
            pdfctx.drawImage($(this)[0], pdfctxX, pdfctxY, canvasWidth, canvasHeight);
            //pdfctxX += canvasWidth + buffer;
            // pour revenir à la ligne car graph prend toute la largeur
            pdfctxX = 0;
            pdfctxY += canvasHeight + buffer;

            // our report page is in a grid pattern so replicate that in the new canvas
            //if (index % 2 === 1) {
            //   pdfctxX = 0;
            //   pdfctxY += canvasHeight + buffer;
            //}
         });

         // create new pdf and add our new canvas as an image
         var pdf = new jsPDF('l', 'pt', [reportPageWidth, reportPageHeight]);
         pdf.addImage($(pdfCanvas)[0], 'PNG', 0, 0);


         // download the canvas in pdf
         pdf.save('graph_pdf.pdf');

         var doc = new jsPDF();

         // download html in pdf

         doc.fromHTML($('#htmltopdf').html(), 15, 15, {
            'width': 170
         });
         doc.save('table-file.pdf');

      });



   </script>
{% endblock %}